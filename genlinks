#!/bin/bash

#  --------------------- genlinks ---------------------
#  A script for generating symlinks.
#  If a directory is passed, the script will duplicate its
#  structure to the destination with symlinks of the original files.
#
#  Usage:
#    genlinks <Source File / Directory> <Destination Directory> [<File Extensions>...]
#
#  Arguments:
#    1. File / Directory - A file or directory to create links from.
#    2. Destination Directory - Destination folder to create links on.
#    3+. File Extensions (optional) - A filter of file extensions to
# 		  create links from. If this option is used, files with different
#         extensions will not be used when creating symlinks.
#  ----------------------------------------------------


function pring_usage
{
    echo "Usage: $(basename "$0") <Source File / Directory> <Destination Directory> [<File Extensions>...]"
}


# Assure a valid amount of command-line arguments was passed
if [[ $# -lt 2 ]]; then
    echo "Error: Missing parameters." >&2
    pring_usage
    exit 1
fi

# Assure source file / directory exists
if [[ ! -e "$1" ]]; then
	echo -e "Source file / folder "$1" doesn't exist."
fi

# Remove trailing '/' if it exists
source_dir=${1%/}
destination_dir=${2%/}

# Source parameter ($1) is a file
if [[ -f "$source_dir" ]]; then
	ln --symbolic -- "$source_dir" "$2"

# Source parameter ($1) is a directory
elif  [[ -d "$source_dir" ]]; then
	# Default value - matches all filenames
	regex=".*"

	# If file extensions were passed
	if [[ $# > 2 ]]; then
		# Generate and replace default iregex expression
		regex="$(echo ".*\("${@:3}"\)$" | sed 's/ /\\|/g')"
	fi
	
	cd -- "$source_dir"

	# Generate symlinks for files in root directory
	find * -maxdepth 0 -type f -iregex "$regex" \
	-exec ln --symbolic -- "$source_dir"/{} "$destination_dir"/{} \;

	# List of files matching the file extensions filter that are in subdirectories
	subdir_files="$(find * -mindepth 1 -type f -iregex "$regex")"

	# Check whether there are subdirectories
	if [[ ! -z $subdir_files ]]; then
		# Generate subdirectories
		while read path; do
			new_subdir_path="$destination_dir"/$(dirname "$path")

			if [[ ! -d "$new_subdir_path" ]]; then
				mkdir --parents "$new_subdir_path"
			fi
		done <<< "$subdir_files"

		# Generate symlinks
		while read path; do
			ln --symbolic -- "$source_dir"/"$path" "$destination_dir"/"$path"
		done <<< "$subdir_files"
	fi
fi